// Playground
path /playgrounds {
  read() { true }
  index() { 'status' }
}

path /playgrounds/{playgroundId} is Playground;

// TODO: Move playground data into `details`, and create playground `contact` object with different permissions
type Playground {
  create() { isAuthenticated() }
  update() { isCurrentUser(this.createdBy) || canModerate() }

  title: String
  address: String
  text: String | Null

  imageUrls: String[]
  sports: Boolean[]
  needs: Boolean[]
  geo: LatLng

  created: InitialTimestamp
  createdBy: CurrentUser
  name: String
  email: String
  status: PlaygroundStatus
}

// User Profile
path /userProfiles/{userId} is UserProfile {
  read() { true }
  write() { isCurrentUser(userId) }
}

type UserProfile {
  name: String
  imageUrl: String | Null
}

// User Role
path /userRoles/{userId} is UserRole {
  read() { isCurrentUser(userId) }
}

type UserRole extends String {
  validate() { this == '' || this == 'moderator' || this == 'admin' }
}

// Misc
// Types
type LatLng {
  lat: Lat
  lng: Lng
}

type Lat extends Number {
  validate() { -90 <= this && this <= 90 }
}

type Lng extends Number {
  validate() { -180 <= this && this <= 180 }
}

type InitialTimestamp extends Number {
  validate() { this == (prior(this) == null ? now : prior(this)) }
}

type CurrentTimestamp extends Number {
  validate() { this == now }
}

type CurrentUser extends String {
  validate() { this == auth.uid }
}

type PlaygroundStatus extends String {
  create() { this == 'new' }
  update() { canModerate() && (this == 'new' || this == 'approved' || this == 'declined') }
}

// Functions
function isAuthenticated() {
  auth != null
}

function canModerate() {
  hasRole('moderator') || hasRole('admin')
}

function hasRole(role) {
  isAuthenticated() && root.userRoles[auth.uid] == role
}

function isCurrentUser(uid) {
  isAuthenticated() && auth.uid == uid
}
